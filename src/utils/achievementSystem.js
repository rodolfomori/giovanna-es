/**
 * Sistema de conquistas para a plataforma de desafios
 * Este arquivo define conquistas e fun√ß√µes para gerenci√°-las
 */

// Defini√ß√£o das conquistas dispon√≠veis no sistema
const achievements = [
    {
      id: 'first_html',
      name: 'Primeiro HTML',
      description: 'Complete seu primeiro desafio de HTML',
      icon: 'üîç',
      category: 'html',
      condition: (stats) => stats.completedChallenges.some(c => c.topic === 'html'),
      points: 10
    },
    {
      id: 'first_css',
      name: 'Estilista Iniciante',
      description: 'Complete seu primeiro desafio de CSS',
      icon: 'üé®',
      category: 'css',
      condition: (stats) => stats.completedChallenges.some(c => c.topic === 'css'),
      points: 10
    },
    {
      id: 'first_js',
      name: 'L√≥gica Iniciante',
      description: 'Complete seu primeiro desafio de JavaScript',
      icon: '‚öôÔ∏è',
      category: 'javascript',
      condition: (stats) => stats.completedChallenges.some(c => c.topic === 'javascript'),
      points: 10
    },
    {
      id: 'html_master_5',
      name: 'Estruturador HTML',
      description: 'Complete 5 desafios de HTML',
      icon: 'üìÑ',
      category: 'html',
      condition: (stats) => stats.completedChallenges.filter(c => c.topic === 'html').length >= 5,
      points: 25
    },
    {
      id: 'css_master_5',
      name: 'Estilista CSS',
      description: 'Complete 5 desafios de CSS',
      icon: 'üñåÔ∏è',
      category: 'css',
      condition: (stats) => stats.completedChallenges.filter(c => c.topic === 'css').length >= 5,
      points: 25
    },
    {
      id: 'js_master_5',
      name: 'Programador JavaScript',
      description: 'Complete 5 desafios de JavaScript',
      icon: 'üíª',
      category: 'javascript',
      condition: (stats) => stats.completedChallenges.filter(c => c.topic === 'javascript').length >= 5,
      points: 25
    },
    {
      id: 'html_master_10',
      name: 'Especialista HTML',
      description: 'Complete 10 desafios de HTML',
      icon: 'üèÜ',
      category: 'html',
      condition: (stats) => stats.completedChallenges.filter(c => c.topic === 'html').length >= 10,
      points: 50
    },
    {
      id: 'css_master_10',
      name: 'Especialista CSS',
      description: 'Complete 10 desafios de CSS',
      icon: 'üèÜ',
      category: 'css',
      condition: (stats) => stats.completedChallenges.filter(c => c.topic === 'css').length >= 10,
      points: 50
    },
    {
      id: 'js_master_10',
      name: 'Especialista JavaScript',
      description: 'Complete 10 desafios de JavaScript',
      icon: 'üèÜ',
      category: 'javascript',
      condition: (stats) => stats.completedChallenges.filter(c => c.topic === 'javascript').length >= 10,
      points: 50
    },
    {
      id: 'total_5',
      name: 'Aprendiz de Programa√ß√£o',
      description: 'Complete 5 desafios no total',
      icon: 'üå±',
      category: 'general',
      condition: (stats) => stats.completedChallenges.length >= 5,
      points: 15
    },
    {
      id: 'total_10',
      name: 'Estudante Dedicado',
      description: 'Complete 10 desafios no total',
      icon: 'üìö',
      category: 'general',
      condition: (stats) => stats.completedChallenges.length >= 10,
      points: 30
    },
    {
      id: 'total_25',
      name: 'Programador em Ascens√£o',
      description: 'Complete 25 desafios no total',
      icon: 'üöÄ',
      category: 'general',
      condition: (stats) => stats.completedChallenges.length >= 25,
      points: 100
    },
    {
      id: 'total_50',
      name: 'Desenvolvedor Web',
      description: 'Complete 50 desafios no total',
      icon: 'üë®‚Äçüíª',
      category: 'general',
      condition: (stats) => stats.completedChallenges.length >= 50,
      points: 200
    },
    {
      id: 'streak_3',
      name: 'Trilha Constante',
      description: 'Complete desafios por 3 dias seguidos',
      icon: 'üî•',
      category: 'streak',
      condition: (stats) => stats.streak >= 3,
      points: 20
    },
    {
      id: 'streak_7',
      name: 'Semana Perfeita',
      description: 'Complete desafios por 7 dias seguidos',
      icon: 'üìÖ',
      category: 'streak',
      condition: (stats) => stats.streak >= 7,
      points: 50
    },
    {
      id: 'all_topics',
      name: 'Desenvolvedor Full-Stack',
      description: 'Complete pelo menos 1 desafio de cada t√≥pico',
      icon: 'üåê',
      category: 'general',
      condition: (stats) => 
        stats.completedChallenges.some(c => c.topic === 'html') && 
        stats.completedChallenges.some(c => c.topic === 'css') && 
        stats.completedChallenges.some(c => c.topic === 'javascript'),
      points: 25
    },
    {
      id: 'perfect_score_5',
      name: 'Resolu√ß√£o Perfeita',
      description: 'Complete 5 desafios sem errar',
      icon: '‚úÖ',
      category: 'general',
      condition: (stats) => stats.perfectChallenges >= 5,
      points: 30
    }
  ];
  
  /**
   * Verifica as conquistas atuais do usu√°rio com base nos stats fornecidos
   * @param {Object} userStats Estat√≠sticas do usu√°rio
   * @returns {Object} Objeto com listas de conquistas obtidas e n√£o obtidas
   */
  export const checkAchievements = (userStats) => {
    // Garantir que temos estat√≠sticas v√°lidas
    const stats = {
      completedChallenges: [],
      streak: 0,
      perfectChallenges: 0,
      ...userStats
    };
    
    // Lista de IDs de conquistas j√° obtidas pelo usu√°rio
    const unlockedAchievementsIds = localStorage.getItem('unlockedAchievements') 
      ? JSON.parse(localStorage.getItem('unlockedAchievements')) 
      : [];
    
    // Verificar todas as conquistas
    const newlyUnlocked = [];
    const unlocked = [];
    const locked = [];
    
    achievements.forEach(achievement => {
      // Verificar se a conquista j√° foi desbloqueada antes
      if (unlockedAchievementsIds.includes(achievement.id)) {
        unlocked.push(achievement);
      } 
      // Verificar se a condi√ß√£o da conquista foi atendida agora
      else if (achievement.condition(stats)) {
        newlyUnlocked.push(achievement);
        unlocked.push(achievement);
        unlockedAchievementsIds.push(achievement.id);
      } 
      // Conquista ainda bloqueada
      else {
        locked.push(achievement);
      }
    });
    
    // Atualizar conquistas desbloqueadas no localStorage
    if (newlyUnlocked.length > 0) {
      localStorage.setItem('unlockedAchievements', JSON.stringify(unlockedAchievementsIds));
    }
    
    return {
      newlyUnlocked,  // Conquistas desbloqueadas nesta verifica√ß√£o
      unlocked,       // Todas as conquistas desbloqueadas
      locked,         // Conquistas ainda bloqueadas
      totalPoints: unlocked.reduce((sum, achievement) => sum + achievement.points, 0)
    };
  };
  
  /**
   * Processa um desafio completo e atualiza estat√≠sticas do usu√°rio
   * @param {Object} challengeData Dados do desafio completado
   * @param {boolean} firstAttempt Indica se foi completado na primeira tentativa
   * @returns {Object} Estat√≠sticas atualizadas e novas conquistas
   */
  export const processCompletedChallenge = (challengeData, firstAttempt = false) => {
    // Obter estat√≠sticas atuais
    const userStats = getUserStats();
    
    // Verificar se o desafio j√° foi completado
    const alreadyCompleted = userStats.completedChallenges.some(
      challenge => challenge.id === challengeData.id
    );
    
    // Se n√£o foi completado, adicionar √† lista
    if (!alreadyCompleted) {
      userStats.completedChallenges.push({
        id: challengeData.id,
        topic: challengeData.topic,
        type: challengeData.type,
        completedAt: new Date().toISOString()
      });
    }
    
    // Atualizar streak (dias consecutivos)
    updateStreak(userStats);
    
    // Incrementar desafios perfeitos (completados na primeira tentativa)
    if (firstAttempt) {
      userStats.perfectChallenges = (userStats.perfectChallenges || 0) + 1;
    }
    
    // Salvar estat√≠sticas atualizadas
    saveUserStats(userStats);
    
    // Verificar conquistas
    const achievementsResult = checkAchievements(userStats);
    
    return {
      stats: userStats,
      achievements: achievementsResult
    };
  };
  
  /**
   * Atualiza o streak (dias consecutivos) do usu√°rio
   * @param {Object} userStats Estat√≠sticas do usu√°rio
   */
  const updateStreak = (userStats) => {
    const today = new Date().toDateString();
    const lastActiveDay = userStats.lastActiveDay || '';
    
    // Converter para objetos Date para compara√ß√£o
    const todayDate = new Date(today);
    const lastDate = lastActiveDay ? new Date(lastActiveDay) : null;
    
    // Verificar se √© o mesmo dia
    if (lastActiveDay === today) {
      // Mesma dia, n√£o faz nada
      return;
    }
    
    // Verificar se √© o dia seguinte
    if (lastDate) {
      const oneDayMs = 24 * 60 * 60 * 1000;
      const diffDays = Math.round((todayDate - lastDate) / oneDayMs);
      
      if (diffDays === 1) {
        // Dia consecutivo, aumentar streak
        userStats.streak = (userStats.streak || 0) + 1;
      } else if (diffDays > 1) {
        // Streak quebrado, reiniciar
        userStats.streak = 1;
      }
    } else {
      // Primeiro dia, iniciar streak
      userStats.streak = 1;
    }
    
    // Atualizar √∫ltimo dia ativo
    userStats.lastActiveDay = today;
  };
  
  /**
   * Obt√©m as estat√≠sticas do usu√°rio do localStorage
   * @returns {Object} Estat√≠sticas do usu√°rio
   */
  export const getUserStats = () => {
    const statsJson = localStorage.getItem('userStats');
    
    if (!statsJson) {
      // Inicializar com valores padr√£o
      return {
        completedChallenges: [],
        streak: 0,
        perfectChallenges: 0,
        lastActiveDay: null
      };
    }
    
    return JSON.parse(statsJson);
  };
  
  /**
   * Salva as estat√≠sticas do usu√°rio no localStorage
   * @param {Object} stats Estat√≠sticas do usu√°rio
   */
  export const saveUserStats = (stats) => {
    localStorage.setItem('userStats', JSON.stringify(stats));
  };
  
  export default {
    achievements,
    checkAchievements,
    processCompletedChallenge,
    getUserStats,
    saveUserStats
  };